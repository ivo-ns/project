# Generated by Django 4.1.3 on 2022-12-12 08:08

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import final_project.web.managers
import final_project.web.models
import final_project.web.utils
import final_project.web.validators
import smart_selects.db_fields
import thumbnails.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[final_project.web.utils.validate_alphabet_characters_english])),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', final_project.web.managers.AppUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=222, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=222, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('booking_fee_per_hour', models.PositiveIntegerField(blank=True, null=True, verbose_name='Booking Fee per hour')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=222)),
                ('slug', models.SlugField(null=True, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='RecordLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=222, unique=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, max_length=100, null=True)),
                ('logo', thumbnails.fields.ImageField(blank=True, null=True, upload_to='record_labels/')),
            ],
        ),
        migrations.CreateModel(
            name='Style',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=222)),
                ('slug', models.SlugField(null=True, unique=True)),
                ('description', models.TextField()),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='web.genre')),
            ],
        ),
        migrations.CreateModel(
            name='Vinyl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=222)),
                ('cat_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(1000000)], verbose_name='Price ($)')),
                ('cover_art', thumbnails.fields.ImageField(blank=True, null=True, upload_to=final_project.web.models.get_upload_path)),
                ('tracklist', models.TextField(blank=True, null=True)),
                ('quantity', models.PositiveIntegerField(default=1, null=True)),
                ('condition', models.CharField(blank=True, choices=[('new', 'New'), ('very_good_plus', 'Very Good (VG+)'), ('very_good', 'Very Good (VG)'), ('good_plus', 'Good Plus (G+)'), ('mint', 'Mint (M)'), ('near_mint', 'Near Mint (NM or M-)')], max_length=123, null=True)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('artist', models.ManyToManyField(to='web.artist')),
                ('genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web.genre')),
                ('record_label', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web.recordlabel')),
                ('style', smart_selects.db_fields.ChainedForeignKey(blank=True, chained_field='genre', chained_model_field='genre', null=True, on_delete=django.db.models.deletion.CASCADE, to='web.style')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vinyl',
                'verbose_name_plural': 'Vinyl',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('first_name', models.CharField(max_length=30, validators=[django.core.validators.MinLengthValidator(2), final_project.web.validators.validate_only_letters])),
                ('last_name', models.CharField(max_length=30, validators=[django.core.validators.MinLengthValidator(2)])),
                ('age', models.PositiveIntegerField()),
                ('gender', models.CharField(choices=[('do_not_show', 'Do Not Show'), ('male', 'Male'), ('female', 'Female')], max_length=11)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VinylPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('purchased_on', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vinyl', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.vinyl')),
            ],
        ),
        migrations.CreateModel(
            name='DJBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('duration', models.PositiveIntegerField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.artist')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
